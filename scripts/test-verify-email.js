const puppeteer = require('puppeteer');

async function testVerifyEmail() {
  console.log('üîç „É°„Éº„É´Ë™çË®º„Éö„Éº„Ç∏„ÅÆ„ÉÜ„Çπ„ÉàÈñãÂßã...\n');
  
  const browser = await puppeteer.launch({
    headless: false,
    args: ['--no-sandbox', '--disable-setuid-sandbox'],
    slowMo: 100
  });
  
  try {
    const page = await browser.newPage();
    
    // „Ç≥„É≥„ÇΩ„Éº„É´„É≠„Ç∞„ÇíÁõ£Ë¶ñ
    const errors = [];
    page.on('console', msg => {
      const text = msg.text();
      if (msg.type() === 'error' || text.includes('Hydration') || text.includes('aria-hidden')) {
        errors.push(text);
        console.log(`[ERROR]: ${text}`);
      }
    });
    
    page.on('pageerror', error => {
      errors.push(error.message);
      console.error(`[PAGE ERROR]: ${error.message}`);
    });
    
    console.log('1. „ÉÜ„Çπ„ÉàÁî®„Éà„Éº„ÇØ„É≥„Åß„É°„Éº„É´Ë™çË®º„Éö„Éº„Ç∏„Å´„Ç¢„ÇØ„Çª„Çπ...');
    // ÂÆüÈöõ„ÅÆ„Éà„Éº„ÇØ„É≥„Åæ„Åü„ÅØ„ÉÜ„Çπ„ÉàÁî®„Éà„Éº„ÇØ„É≥„Çí‰ΩøÁî®
    const testToken = '628c5938-d8b9-47b7-97ee-91c12aece35e';
    await page.goto(`http://localhost:3000/auth/verify-email?token=${testToken}`, {
      waitUntil: 'networkidle0',
      timeout: 30000
    });
    
    await new Promise(r => setTimeout(r, 3000));
    
    console.log('\n2. „Éö„Éº„Ç∏„ÅÆÁä∂ÊÖã„ÇíÁ¢∫Ë™ç...');
    const pageInfo = await page.evaluate(() => {
      const title = document.querySelector('h1');
      const message = document.querySelector('div[style*="fontSize"]');
      const buttons = Array.from(document.querySelectorAll('a[href]')).map(a => ({
        text: a.textContent,
        href: a.href
      }));
      
      return {
        title: title ? title.textContent : null,
        message: message ? message.textContent : null,
        buttons,
        hasHeader: !!document.querySelector('header'),
        hasAppBar: !!document.querySelector('.MuiAppBar-root')
      };
    });
    
    console.log('  „Çø„Ç§„Éà„É´:', pageInfo.title);
    console.log('  „É°„ÉÉ„Çª„Éº„Ç∏:', pageInfo.message ? pageInfo.message.substring(0, 50) + '...' : '„Å™„Åó');
    console.log('  „Éú„Çø„É≥Êï∞:', pageInfo.buttons.length);
    console.log('  „Éò„ÉÉ„ÉÄ„ÉºÂ≠òÂú®:', pageInfo.hasHeader ? '‚ùå „ÅÇ„ÇäÔºàÂïèÈ°åÔºâ' : '‚úÖ „Å™„ÅóÔºàÊ≠£Â∏∏Ôºâ');
    console.log('  AppBarÂ≠òÂú®:', pageInfo.hasAppBar ? '‚ùå „ÅÇ„ÇäÔºàÂïèÈ°åÔºâ' : '‚úÖ „Å™„ÅóÔºàÊ≠£Â∏∏Ôºâ');
    
    console.log('\n3. „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„É™„ÇØ„Ç®„Çπ„Éà„ÇíÁ¢∫Ë™ç...');
    const responses = [];
    page.on('response', response => {
      if (response.url().includes('/api/auth/verify-email')) {
        responses.push({
          url: response.url(),
          status: response.status(),
          statusText: response.statusText()
        });
      }
    });
    
    // „Éö„Éº„Ç∏„Çí„É™„É≠„Éº„Éâ„Åó„Å¶API„É™„ÇØ„Ç®„Çπ„Éà„ÇíÁ¢∫Ë™ç
    await page.reload({ waitUntil: 'networkidle0' });
    await new Promise(r => setTimeout(r, 2000));
    
    if (responses.length > 0) {
      console.log('  API„É¨„Çπ„Éù„É≥„Çπ:');
      responses.forEach(res => {
        console.log(`    - ${res.url}`);
        console.log(`      „Çπ„ÉÜ„Éº„Çø„Çπ: ${res.status} ${res.statusText}`);
      });
    }
    
    console.log('\n4. „Ç®„É©„Éº„ÉÅ„Çß„ÉÉ„ÇØ...');
    if (errors.length > 0) {
      console.log('  ‚ö†Ô∏è „Ç®„É©„Éº„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü:');
      errors.forEach(err => console.log(`    - ${err.substring(0, 100)}`));
    } else {
      console.log('  ‚úÖ „Ç®„É©„Éº„Å™„Åó');
    }
    
    // ÁµêÊûúÂà§ÂÆö
    console.log('\n=== „ÉÜ„Çπ„ÉàÁµêÊûú ===');
    const hasHydrationError = errors.some(e => e.includes('Hydration'));
    const hasAriaError = errors.some(e => e.includes('aria-hidden'));
    const hasHeader = pageInfo.hasHeader || pageInfo.hasAppBar;
    
    if (!hasHydrationError && !hasAriaError && !hasHeader) {
      console.log('‚úÖ „Åô„Åπ„Å¶„ÅÆ„ÉÜ„Çπ„Éà„Å´ÂêàÊ†º„Åó„Åæ„Åó„ÅüÔºÅ');
      console.log('  - Hydration„Ç®„É©„Éº„Å™„Åó');
      console.log('  - aria-hidden„Ç®„É©„Éº„Å™„Åó');
      console.log('  - Áã¨Á´ã„Åó„Åü„É¨„Ç§„Ç¢„Ç¶„ÉàÔºà„Éò„ÉÉ„ÉÄ„Éº„Å™„ÅóÔºâ');
    } else {
      console.log('‚ùå ÂïèÈ°å„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü:');
      if (hasHydrationError) console.log('  - Hydration„Ç®„É©„Éº„ÅÇ„Çä');
      if (hasAriaError) console.log('  - aria-hidden„Ç®„É©„Éº„ÅÇ„Çä');
      if (hasHeader) console.log('  - „Éò„ÉÉ„ÉÄ„Éº„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã');
    }
    
    console.log('\n10ÁßíÂæå„Å´„Éñ„É©„Ç¶„Ç∂„ÇíÈñâ„Åò„Åæ„Åô...');
    await new Promise(r => setTimeout(r, 10000));
    
  } catch (error) {
    console.error('\n‚ùå „ÉÜ„Çπ„Éà„Ç®„É©„Éº:', error.message);
  } finally {
    await browser.close();
  }
}

testVerifyEmail().catch(console.error);