#!/usr/bin/env node

/**
 * „É°„Éº„É´Ë™çË®º„ÉÜ„Çπ„ÉàÁî®„É¶„Éº„Ç∂„Éº‰ΩúÊàê„Çπ„ÇØ„É™„Éó„Éà
 */

const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const crypto = require('crypto');

// Ëâ≤‰ªò„Åç„Ç≥„É≥„ÇΩ„Éº„É´Âá∫Âäõ
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// User„Çπ„Ç≠„Éº„ÉûÂÆöÁæ©Ôºàsrc/lib/models/User.ts„Å®Âêå„ÅòÔºâ
const UserSchema = new mongoose.Schema({
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
    trim: true,
  },
  password: {
    type: String,
    required: true,
  },
  name: {
    type: String,
    required: true,
    trim: true,
  },
  emailVerified: {
    type: Boolean,
    default: false,
  },
  emailVerificationToken: {
    type: String,
  },
  emailVerificationTokenExpiry: {
    type: Date,
  },
  emailSendFailed: {
    type: Boolean,
    default: false,
  },
  passwordResetToken: {
    type: String,
  },
  passwordResetExpires: {
    type: Date,
  },
}, {
  timestamps: true,
});

const User = mongoose.models.User || mongoose.model('User', UserSchema);

// „ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº„ÅÆ„Éá„Éº„Çø
const testUsers = [
  {
    email: 'test-valid@example.com',
    name: 'ÊúâÂäπ„Éà„Éº„ÇØ„É≥„É¶„Éº„Ç∂„Éº',
    password: 'Test123!@#',
    scenario: 'Ê≠£Â∏∏„Å™Ë™çË®º„Éï„É≠„ÉºÁî®',
    tokenValid: true,
    emailVerified: false,
  },
  {
    email: 'test-expired@example.com',
    name: 'ÊúüÈôêÂàá„Çå„Éà„Éº„ÇØ„É≥„É¶„Éº„Ç∂„Éº',
    password: 'Test123!@#',
    scenario: 'ÊúüÈôêÂàá„Çå„Éà„Éº„ÇØ„É≥„ÉÜ„Çπ„ÉàÁî®',
    tokenExpired: true,
    emailVerified: false,
  },
  {
    email: 'test-verified@example.com',
    name: 'Ë™çË®ºÊ∏à„Åø„É¶„Éº„Ç∂„Éº',
    password: 'Test123!@#',
    scenario: 'Êó¢„Å´Ë™çË®ºÊ∏à„Åø„ÉÜ„Çπ„ÉàÁî®',
    tokenValid: true,
    emailVerified: true,
  },
  {
    email: 'test-resend@example.com',
    name: 'ÂÜçÈÄÅ‰ø°„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº',
    password: 'Test123!@#',
    scenario: '„É°„Éº„É´ÂÜçÈÄÅ‰ø°„ÉÜ„Çπ„ÉàÁî®',
    tokenValid: false,
    emailVerified: false,
  },
];

async function connectDB() {
  try {
    const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/board-app';
    await mongoose.connect(MONGODB_URI);
    log('‚úÖ „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂öÊàêÂäü', 'green');
  } catch (error) {
    log(`‚ùå „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂öÂ§±Êïó: ${error.message}`, 'red');
    process.exit(1);
  }
}

async function createTestUsers() {
  const createdUsers = [];

  for (const userData of testUsers) {
    try {
      // Êó¢Â≠ò„É¶„Éº„Ç∂„Éº„ÇíÂâäÈô§
      await User.deleteOne({ email: userData.email });

      // „Éë„Çπ„ÉØ„Éº„Éâ„Çí„Éè„ÉÉ„Ç∑„É•Âåñ
      const hashedPassword = await bcrypt.hash(userData.password, 10);

      // „Éà„Éº„ÇØ„É≥„Å®ÊúâÂäπÊúüÈôê„ÇíË®≠ÂÆö
      let token = null;
      let expiry = null;

      if (userData.tokenValid) {
        token = crypto.randomBytes(32).toString('hex');
        expiry = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24ÊôÇÈñìÂæå
      } else if (userData.tokenExpired) {
        token = crypto.randomBytes(32).toString('hex');
        expiry = new Date(Date.now() - 60 * 60 * 1000); // 1ÊôÇÈñìÂâçÔºàÊúüÈôêÂàá„ÇåÔºâ
      }

      // „É¶„Éº„Ç∂„Éº‰ΩúÊàê
      const user = await User.create({
        email: userData.email,
        name: userData.name,
        password: hashedPassword,
        emailVerified: userData.emailVerified,
        emailVerificationToken: token,
        emailVerificationTokenExpiry: expiry,
      });

      createdUsers.push({
        email: user.email,
        name: user.name,
        scenario: userData.scenario,
        emailVerified: user.emailVerified,
        token: token,
        tokenExpiry: expiry,
      });

      log(`‚úÖ ‰ΩúÊàê: ${user.email} - ${userData.scenario}`, 'green');
      if (token) {
        log(`   „Éà„Éº„ÇØ„É≥: ${token}`, 'cyan');
        log(`   ÊúâÂäπÊúüÈôê: ${expiry}`, 'cyan');
      }
    } catch (error) {
      log(`‚ùå „Ç®„É©„Éº: ${userData.email} - ${error.message}`, 'red');
    }
  }

  return createdUsers;
}

async function main() {
  log('\nüöÄ „ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº‰ΩúÊàê„Çπ„ÇØ„É™„Éó„ÉàÈñãÂßã\n', 'bright');

  await connectDB();

  log('\nüìù „ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê‰∏≠...\n', 'yellow');
  const users = await createTestUsers();

  log('\n‚úÖ „ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº‰ΩúÊàêÂÆå‰∫Ü!\n', 'bright');
  
  // „ÉÜ„Çπ„ÉàÁî®URLÁîüÊàê
  log('üìã „ÉÜ„Çπ„ÉàÁî®URL:', 'yellow');
  console.log('');
  
  users.forEach(user => {
    if (user.token) {
      const url = `http://localhost:3000/auth/verify?token=${user.token}`;
      log(`${user.scenario}:`, 'cyan');
      console.log(`  ${url}`);
      console.log('');
    }
  });

  log('üìä ‰ΩúÊàê„Åï„Çå„Åü„É¶„Éº„Ç∂„Éº:', 'yellow');
  console.table(users.map(u => ({
    Email: u.email,
    Name: u.name,
    Scenario: u.scenario,
    Verified: u.emailVerified ? '‚úÖ' : '‚ùå',
    'Has Token': u.token ? '‚úÖ' : '‚ùå',
  })));

  await mongoose.connection.close();
  log('\n‚ú® ÂÆå‰∫Ü!', 'green');
}

main().catch(error => {
  log(`‚ùå „Ç®„É©„Éº: ${error.message}`, 'red');
  process.exit(1);
});